{"ast":null,"code":"function componentDidMount() {\n  fetch(\"https://solutionsomg.com/Invitados\").then(res => res.json()).then(rows => {\n    this.setState({\n      Usuarios: rows\n    });\n  });\n}\n\nexport function configureFakeBackend() {\n  console.log(this.state.Usuarios);\n  let users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'hola',\n    lastName: 'User'\n  }];\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const isLoggedIn = 'Bearer fake-jwt-token';\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = users.find(x => x.username === params.username && x.password === params.password);\n          if (!user) return error('Error de Accesos');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            token: 'fake-jwt-token'\n          });\n        } // get users - secure\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response)); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/xampp/htdocs/react/login/src/_helpers/fake-backend.js"],"names":["componentDidMount","fetch","then","res","json","rows","setState","Usuarios","configureFakeBackend","console","log","state","users","id","username","password","firstName","lastName","realFetch","window","url","opts","isLoggedIn","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","find","x","error","ok","token","unauthorised","response","text","stringify","status","message"],"mappings":"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","sourcesContent":["function componentDidMount() {\n\n\n    fetch(\"https://solutionsomg.com/Invitados\")\n      .then(res => res.json())\n      .then((rows) => {\n        this.setState({ Usuarios: rows })\n      })\n}\nexport function configureFakeBackend() {\n\n\n\n    console.log(this.state.Usuarios)\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'hola', lastName: 'User' }];\n\n\n\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        const isLoggedIn = 'Bearer fake-jwt-token';\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {  \n                // authenticate - public\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    const params = JSON.parse(opts.body);\n                    const user = users.find(x => x.username === params.username && x.password === params.password);\n                    if (!user) return error('Error de Accesos');\n                    return ok({\n                        id: user.id,\n                        username: user.username,\n                        firstName: user.firstName,\n                        lastName: user.lastName,\n                        token: 'fake-jwt-token'\n                    });\n                }\n                // get users - secure\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    if (!isLoggedIn) return unauthorised();\n                    return ok(users);\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n                // private helper functions\n\n                function ok(body) {\n                    resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\n                }\n\n                function unauthorised() {\n                    resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\n                }\n\n                function error(message) {\n                    resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\n                }\n            }, 500);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}